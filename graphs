#include <iostream>
#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <stack>

using namespace std;

class Graph {
private:
    unordered_map<int, vector<int>> adjacencyList;

public:
    void addVertex(int vertex) {
        if (adjacencyList.find(vertex) == adjacencyList.end()) {
            adjacencyList[vertex] = vector<int>();
        }
    }

    void addEdge(int from, int to) {
        addVertex(from);
        addVertex(to);
        adjacencyList[from].push_back(to);
    }

    void printGraph() {
        for (const auto& [vertex, neighbors] : adjacencyList) {
            cout << vertex << " -> ";
            for (int neighbor : neighbors) {
                cout << neighbor << " ";
            }
            cout << endl;
        }
    }

    void dfs(int startVertex) {
        unordered_set<int> visited;
        stack<int> stack;

        stack.push(startVertex);

        while (!stack.empty()) {
            int currentVertex = stack.top();
            stack.pop();

            if (visited.find(currentVertex) == visited.end()) {
                cout << currentVertex << " ";
                visited.insert(currentVertex);

                for (int neighbor : adjacencyList[currentVertex]) {
                    if (visited.find(neighbor) == visited.end()) {
                        stack.push(neighbor);
                    }
                }
            }
        }

        cout << endl;
    }
};

int main() {
    Graph graph;

    graph.addEdge(1, 2);
    graph.addEdge(1, 3);
    graph.addEdge(2, 4);
    graph.addEdge(2, 5);
    graph.addEdge(3, 6);
    graph.addEdge(3, 7);

    cout << "Graph:\n";
    graph.printGraph();

    cout << "\nDFS starting from vertex 1:\n";
    graph.dfs(1);

    return 0;
}
